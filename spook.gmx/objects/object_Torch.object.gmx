<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///torch attributes

isOn = false;
canOn = true;

lightRadius = 60;
lightPrecision = 80;
torch_XPos = 0;
torch_YPos = 0;

lightRadius = 80;

triangle_One_XPoints[3] = 0;
triangle_One_YPoints[3] = 0;

triangle_Two_XPoints[3] = 0;
triangle_Two_YPoints[3] = 0;

lightArc = 30;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///define light surface attributes
global.light = surface_create(room_width, room_height);

surfaceAlpha = 0.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///define triangle points
triangle_One_XPoints[3] = 0;
triangle_One_YPoints[3] = 0;

triangle_Two_XPoints[3] = 0;
triangle_Two_YPoints[3] = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///an instance of hitbox
lightHitBox = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create object hitbox of dashed circle
dashCircle = instance_create(mouse_x, mouse_y, object_Hitbox_Dashed_Circle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if mouse left or space is pressed

if ((keyboard_check(vk_space) || mouse_check_button(mb_left)) &amp;&amp; canOn)    {
    isOn = true;
    
    //when isOn is true, assign x and y position of mouse
    if (isOn &amp;&amp; lightHitBox == noone)   {
         lightHitBox = instance_create(mouse_x, mouse_y, object_Hitbox_TorchDefault);
    }
} else  {
    isOn = false
}

//to make dotted line track mouse constantly
torch_XPos = mouse_x;
torch_YPos = mouse_y;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///when there is a lightHitBox
if (instance_exists(lightHitBox))   {
     lightHitBox.x = mouse_x;
     lightHitBox.y = mouse_y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///find third point of triangle
if (instance_exists(object_Player_1_Stub))  {
var X = object_Player_1_Stub.x;
var Y = object_Player_1_Stub.y;
var dist = point_distance(X,Y, mouse_x, mouse_y);
var angle = point_direction(X,Y, mouse_x, mouse_y);
var arc = 0;

if(dist &gt; lightRadius)
    arc = arcsin(lightRadius/dist);
    
var dir1 = angle - radtodeg(arc);
var dir2 = angle + radtodeg(arc);
var tangentdist = dist*cos(arc);

triangle_One_XPoints[0] = X;
triangle_One_XPoints[1] = mouse_x;
triangle_One_XPoints[2] = X + lengthdir_x(tangentdist, dir1);

triangle_One_YPoints[0] = Y;
triangle_One_YPoints[1] = mouse_y;
triangle_One_YPoints[2] = Y + lengthdir_y(tangentdist, dir1);

triangle_Two_XPoints[0] = X;
triangle_Two_XPoints[1] = mouse_x;
triangle_Two_XPoints[2] = X + lengthdir_x(tangentdist, dir2);

triangle_Two_YPoints[0] = Y;
triangle_Two_YPoints[1] = mouse_y;
triangle_Two_YPoints[2] = Y + lengthdir_y(tangentdist, dir2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy all instances of hitbox when light is off
if (!isOn)  {
    with (lightHitBox)    {
        instance_destroy();
    }
    lightHitBox = noone;   
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show circle only is not on

if (isOn)   {
    dashCircle.image_alpha = 0;
} else  {
    dashCircle.image_alpha = 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw light surface

var i = 0;
surface_set_target(global.light);
draw_set_color(c_white);

draw_clear_alpha(c_black, surfaceAlpha);
draw_set_blend_mode(bm_subtract);

draw_set_alpha((1/lightPrecision));

if (isOn)   {
    for (i=0; i&lt;=lightPrecision; i+=1) {
        draw_circle(mouse_x, mouse_y, (lightRadius - (lightRadius/lightPrecision*i)), false);
    }
    
    if (instance_exists(object_Player_1_Stub))   {
        draw_triangle(triangle_One_XPoints[0], triangle_One_YPoints[0], triangle_One_XPoints[1], triangle_One_YPoints[1], triangle_One_XPoints[2], triangle_One_YPoints[2], false);
        draw_triangle(triangle_Two_XPoints[0], triangle_Two_YPoints[0], triangle_Two_XPoints[1], triangle_Two_YPoints[1], triangle_Two_XPoints[2], triangle_Two_YPoints[2], false);
    }
}
else {
    //draw_set_alpha(0.1);
    //draw_sprite(sprite_DashedCircle, 0, torch_XPos, torch_YPos);
}

if (instance_exists(object_Cig))    {
draw_set_alpha((1/lightPrecision));
draw_set_blend_mode(bm_max);

var cigRadius = object_Cig.meter;
var length = object_Cig.meter/200*20;

draw_set_alpha((1/object_Cig.meter));

for(var i = 0; i&lt;(object_Cig.meter); i++)   {
    draw_circle(object_Cig.x+length, object_Cig.y+2.5, (cigRadius - (cigRadius/object_Cig.meter*i)), false);
}

}

draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
surface_reset_target();

if (surface_exists(global.light)) {
    draw_surface(global.light,0,0);
} else {
    global.light=surface_create(room_width,room_height);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
