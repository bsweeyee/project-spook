<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///torch attributes

torchLife = room_speed * 60 * 3;
isOn = false;

torch_XPos = 0;
torch_YPos = 0;

lightRadius = 80;

triangle_One_XPoints[3] = 0;
triangle_One_YPoints[3] = 0;

triangle_Two_XPoints[3] = 0;
triangle_Two_YPoints[3] = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///define light surface
global.light = surface_create(room_width, room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if mouse left pressed
if (mouse_check_button(mb_left))    {
    isOn = true;
    
    //when isOn is true, assign x and y position of mouse
    if (isOn &amp;&amp; !instance_exists(object_HitboxCircle_1))   {
         instance_create(mouse_x, mouse_y, object_HitboxCircle_1);
    }
} else  {
    isOn = false
}
<<<<<<< HEAD
//to make dotted line track mouse constantly
torch_XPos = mouse_x;
torch_YPos = mouse_y;
=======
>>>>>>> origin/master
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calculate triangle points
X = object_Player_1_Stub.x;
Y = object_Player_1_Stub.y;
dist = point_distance(X,Y, mouse_x, mouse_y);
angle = point_direction(X,Y, mouse_x, mouse_y);
arc = 0;
if(dist &gt; lightRadius)
    arc = arcsin(lightRadius/dist);
dir1 = angle - radtodeg(arc);
dir2 = angle + radtodeg(arc);
tangentdist = dist*cos(arc);


triangle_One_XPoints[0] = X;
triangle_One_XPoints[1] = mouse_x;
//triangle_One_XPoints[2] = ((lightRadius)*(Y- torch_YPos)/sqrt(sqr(Y-torch_YPos)+sqr(X - torch_XPos))) + torch_XPos;
triangle_One_XPoints[2] = X + lengthdir_x(tangentdist, dir1);

triangle_One_YPoints[0] = Y;
triangle_One_YPoints[1] = mouse_y;
//triangle_One_YPoints[2] = (-(lightRadius)*(X- torch_XPos)/sqrt(sqr(Y-torch_YPos)+sqr(X - torch_XPos))) + torch_YPos;
triangle_One_YPoints[2] = Y + lengthdir_y(tangentdist, dir1);

triangle_Two_XPoints[0] = X;
triangle_Two_XPoints[1] = mouse_x;
//triangle_Two_XPoints[2] = (-(lightRadius)*(Y- torch_YPos)/sqrt(sqr(Y-torch_YPos)+sqr(X - torch_XPos))) + torch_XPos;
triangle_Two_XPoints[2] = X + lengthdir_x(tangentdist, dir2);

triangle_Two_YPoints[0] = Y;
triangle_Two_YPoints[1] = mouse_y;
//triangle_Two_YPoints[2] = ((lightRadius)*(X- torch_XPos)/sqrt(sqr(Y-torch_YPos)+sqr(X - torch_XPos))) + torch_YPos;
triangle_Two_YPoints[2] = Y + lengthdir_y(tangentdist, dir2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy all instances of hitbox when light is off
if (!isOn)  {
    if (instance_exists(object_HitboxCircle_1))  {
        with (object_HitboxCircle_1)    {
            instance_destroy();
        }   
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///when light is on, reduce battery life
if (isOn)   {
    torchLife -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///when battery life is 0, is on will always be false
if (torchLife &lt;= 0) {
    torchLife = 0;
    isOn = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw light surface
surface_set_target(global.light);

draw_clear_alpha(c_black, 0.85);
draw_set_blend_mode(bm_subtract);

draw_set_alpha(1);

if (isOn)   {
    draw_circle(mouse_x, mouse_y, lightRadius, false);
    draw_triangle(triangle_One_XPoints[0], triangle_One_YPoints[0], triangle_One_XPoints[1], triangle_One_YPoints[1], triangle_One_XPoints[2], triangle_One_YPoints[2], false);
    draw_triangle(triangle_Two_XPoints[0], triangle_Two_YPoints[0], triangle_Two_XPoints[1], triangle_Two_YPoints[1], triangle_Two_XPoints[2], triangle_Two_YPoints[2], false);
}
else {
    draw_sprite(sprite_DashedCircle, 0, torch_XPos, torch_YPos);
}

draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
surface_reset_target();

if (surface_exists(global.light)) {
    draw_surface(global.light,0,0);
} else {
    global.light=surface_create(room_width,room_height);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
