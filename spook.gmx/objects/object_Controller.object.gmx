<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug messages
showDebug = false;

playerLifeMessage = "player life: ";
spawnerTimerMessage = "spawner timer: ";
torchLifeMessage = "torch Life: ";
playerScoreMessage = "score: ";
playerCigarMessage = "cigar: ";
playerComboMessage = "combo: ";

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create global player score, combo, enemyHerringKilled and comboTimer
MAX_COMBO_TIMER = room_speed * 3;

global.playerScore = 0;
global.enemyCount = 0;

global.powerupA = 10;
global.powerupB = 10;
global.cigs = 5;
global.combo = 0;

comboTimer = MAX_COMBO_TIMER;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create array to store positions of rail objects

global.railing_pos[instance_number(object_Railing), 2] = 0;
for (var i=0;i&lt;instance_number(object_Railing);i++) {
    var inst = instance_find(object_Railing, i);
    global.railing_pos[i, 0] = inst.x;
    global.railing_pos[i, 1] = inst.y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///control background alpha
background_alpha[0] = 1.0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make cursor invisible
window_set_cursor(cr_none);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///intialize variables for pause screen
pauseScreen = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create all starting objects before player spawn
instance_create(0, 0, object_Fog_Controller);
instance_create(room_width/2, room_height/2, object_Player_1_Silhouette);
var inst_1 = instance_create(-sprite_get_width(sprite_Mist_2)*5/2, room_height*(14/16), object_Mist);
var inst_2 = instance_create(room_width+sprite_get_width(sprite_Mist_2)*5/2, room_height*(14/16), object_Mist);
inst_1.image_xscale *= 1;
inst_2.image_xscale *= -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press "r" to restart
//if (showDebug)  {
    if (keyboard_check_pressed(ord('R')))   {
        game_restart();
    }   
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///when escape is pressed, pause the game
if (keyboard_check_pressed(vk_escape) &amp;&amp; global.inst_Torch.canOn)  {
    pauseScreen = !pauseScreen;
    if (pauseScreen)    {
        instance_deactivate_all(true);
        instance_activate_object(object_Torch);
        instance_activate_object(object_Hitbox_Dashed_Circle);
        instance_activate_object(object_Sign_Cigar);
        instance_create(room_width*0.51, room_height*0.75, object_Quit_Button);
        instance_create(room_width *0.51, room_height*0.60, object_Control_Button);
        instance_create(room_width *0.51, room_height*0.45, object_Return_Button);
    } else if (!pauseScreen)    {
        instance_activate_all();
        with (object_Quit_Button)   {
            instance_destroy();
        }
        with (object_Control_Button)    {
            instance_destroy();
        }
         with (object_Return_Button)    {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///checks if 5 seconds have passed and resets combo if so
if (comboTimer &lt;= 0)    {
    global.combo = 0;
    comboTimer = MAX_COMBO_TIMER;
    with (object_CommonEnemyTraits) {
        scoreValue = BASE_SCORE;
    }
} else  {
    comboTimer -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw debug message
if (showDebug)  {
    //for all enemies on the field, draw their death timers above them
    draw_set_font(-1);
    draw_set_color(c_white);
    
    for (var i=0; i &lt; instance_number(object_CommonEnemyTraits); i++)   {
        draw_set_color(c_white);
        var inst = instance_find(object_CommonEnemyTraits, i);
        draw_text(inst.x, inst.y - 50, inst.hp);
    }
    
    //draw spawn rate
    if (instance_exists(object_CommonSpawnerTraits))    
    draw_text(10, 10, "spawnrate = " + string(object_CommonSpawnerTraits.spawnrate));
    
    //draw spawn timer
    if (instance_exists(object_CommonSpawnerTraits))    {
    draw_text(10, 30, spawnerTimerMessage);
    draw_text(140, 30, object_CommonSpawnerTraits.timer);
    }
    
    //draw enemy count
    draw_text(10, 50, "enemy");
    draw_text(110, 50, global.enemyCount);
    
    //draw max enemies
    if (instance_exists(object_CommonSpawnerTraits))    
    draw_text(10, 70, "maxenemies = " + string(object_CommonSpawnerTraits.maxenemies));
    
    //draw current cpu frames
    draw_text(10, 90, "FPS = " + string(fps_real));
    
    //draw if it is paused
    if (instance_exists(object_Player_1_Stub))  {
        draw_text(10, 110, "playerSpeed = " + string(object_Player_1_Stub.playerSpeed));
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///when pause menu, draw pause text
if (pauseScreen)    {
    draw_set_font(font_Limelight_30);
    draw_set_color(c_white);
    draw_text(room_width*0.47, room_height*0.15, "PAUSED");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
